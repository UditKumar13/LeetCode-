** Striver Sheet **

Day 1 :

1.Set matrix Zeroes :

(first Inner 2d then check the outer 
first row and first col)

2.Pascal Triangle 
(Array ArrayList  : arr[i-1] + arr[i] logic )

3.Next Permutation :

(find i from the increasing subarray from the last , find j from the last ele
where arr[i] < arr[j] , swap arr[i] and arr[j], now reverse arr[i+1] till arr[n-1])

4.Kadane's algo Maximum Subarray :
(Initially sum =0 , max = arr[0] , 
if Sum<0, then make sum = 0 , now from i=1 to n ,sum+= arr[i] then compete the max ,sum )

5.Sort array of 0's 1's 2's :
(i=0 j =0 k =n-1,
while(i<=k) if arr[i] ==1 i++ , arr[i]==0 swap(arr[i],arr[j]) i++,j++
,arr[i]==2 swap(arr[i],arr[k])k-- simple do this )

6.Buy and Sell :
(It uses the beautiful application of kadane's logic )

2.Day 2 :
7.Rotate Image :

(1.Transpose 2. reverse by row)

8.Merge Intervals :

(start and end use and a condition where s <= end then update else add the range)

9.Merge two sorted array :
(tail approach simply better start from the last ele to first)

10.Duplicate ele :
(Use 2 pointers approach , tortoise and hare algo)

11.Missing number : 
(here we use XOR operator approach bcz a^a = 0)

12.Global and local Inversion : 
(This is the question where the smartness comes into the play... :) 
Just find the 1 counter e.g where it can't return false )

13.Search in 2d matrix :
(Start from the top right corner and start traversal according to the 
constraints given ) 

14.Pow(x,n)

(Beware of the condition of the negative n  :
if (n<0) return 1/x * myPow(1/x, -(n+1))) 

15. Majority ele n>2 :
(We have use the Boyre Moore majority algo)

16.Majority ele n>3 :

() 
